#! /usr/bin/env python

PACKAGE='mir_empty_space_detection'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
pc_object_segmentation = gen.add_group("Pointcloud object segmentation")
# def add (self, name, paramtype, level, description, default = None, min = None, max = None, edit_method = ""):

pc_object_segmentation.add("enable_debug_pc", bool_t, 0, "Enable debug pointcloud publisher", False)

pc_os_passthrough = pc_object_segmentation.add_group("Passthrough filter")
pc_os_passthrough.add ("enable_passthrough_filter", bool_t, 0, "Enable passthrough filter", False)
pc_os_passthrough.add ("passthrough_filter_field_name", str_t, 0, "The field name used for filtering", "x")
pc_os_passthrough.add ("passthrough_filter_limit_min", double_t, 0, "The minimum allowed field value a point will be considered from", 0.4, -10.0, 10.0)
pc_os_passthrough.add ("passthrough_filter_limit_max", double_t, 0, "The maximum allowed field value a point will be considered from", 0.7, -10.0, 10.0)

pc_os_cropbox = pc_object_segmentation.add_group("Cropbox filter")
pc_os_cropbox.add ("enable_cropbox_filter", bool_t, 0, "Enable cropbox filter", True)
pc_os_cropbox.add ("cropbox_filter_min_x", double_t, 0, "The minimum allowed x value a point will be considered from", 0.45, -10.0, 10.0)
pc_os_cropbox.add ("cropbox_filter_max_x", double_t, 0, "The maximum allowed x value a point will be considered from", 0.8, -10.0, 10.0)
pc_os_cropbox.add ("cropbox_filter_min_y", double_t, 0, "The minimum allowed y value a point will be considered from", -0.4, -10.0, 10.0)
pc_os_cropbox.add ("cropbox_filter_max_y", double_t, 0, "The maximum allowed y value a point will be considered from", 0.4, -10.0, 10.0)
pc_os_cropbox.add ("cropbox_filter_min_z", double_t, 0, "The minimum allowed z value a point will be considered from", 0.0, -10.0, 10.0)
pc_os_cropbox.add ("cropbox_filter_max_z", double_t, 0, "The maximum allowed z value a point will be considered from", 0.6, -10.0, 10.0)

pc_os_empty_space_detection = pc_object_segmentation.add_group("Empty space detection")
pc_os_empty_space_detection.add ("object_height_above_workspace", double_t, 0, "object_height_above_workspace (to the gripper frame)", 0.03, -10.0, 10.0)
pc_os_empty_space_detection.add ("empty_space_radius", double_t, 0, "empty_space_radius", 0.045 , 0.0, 1.0)
pc_os_empty_space_detection.add ("num_of_empty_spaces_required", double_t, 0, "the number of max empty spaces", 4 , 1, 50)
exit (gen.generate (PACKAGE, "mir_empty_space_detection", "EmptySpaceDetection"))